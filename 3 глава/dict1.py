# collections.abc содержит абстрактные базовые классы Mapping и MutableMapping, формализующие интерфейсы типа dict и
# родственных ему
from collections import abc, OrderedDict

my_dict = {}

# В тестах использовать isinstance лучше, чем проверять принадлежит ли аргумент функции типу dict, потому что допустимы
# так же другие типы
print(isinstance(my_dict, abc.Mapping))

# Ключи словаря должны быть хешируемыми

# Хешируемый
tt = (1, 3, (30, 40))
print(hash(tt))

# Не хешируемый
tl = (1, 3, [30, 40])
# print(hash(tl))

# Хешируемый
tf = (1, 3, frozenset([30, 40]))
print(hash(tf))

# Все стандартные неизменяемые объекты хешируемы (если tuple не содержит ссылки на нехешируемые объекты)

# Любой пользовательский тип является хешируемым (его ID = хеш). Если реализован метод __eq__, объект будет хешируемым,
# если все его атрибуты не изменяемы

# Построение словаря разными методами:
a = dict(one=1, two=2, three=3)
b = {'one': 1, 'two': 2, 'three': 3}
c = dict(zip(['one', 'two', 'three'], [1, 2, 3]))
d = dict([('one', 1), ('two', 2), ('three', 3)])
e = dict({'one': 1, 'two': 2, 'three': 3})

print(a == b == c == d == e)

# OrderedDict сохраняет порядок добавлени элементов
dd = OrderedDict({1: 2, 2: 1})
print(dd)
